#include <Arduboy2.h>
#include <ArduboyTones.h>

#define EEPROM_START_C1                 (EEPROM_STORAGE_SPACE_START + 128)
#define EEPROM_START_C2                 (EEPROM_START_C1 + 1)
#define EEPROM_SCORE                    (EEPROM_START_C1 + 2)

Arduboy2 arduboy;
ArduboyTones sound(arduboy.audio.enabled);
Sprites sprite;

// setting up variables

struct Position {
  int8_t x;
  int8_t y;
};

Position player = { 54, 40 };
Position cloudl = { 0, 0 };
Position cloudr = { 103, 0 };
Position en1 = { 0, 0 };
Position en2 = { 0, 0 };

uint8_t state = 0;

// variable for Cloud backdrop
int8_t backdropx = -3;
int8_t backdropy = 0;

// variable for enemy position
int8_t enemy1x = random(26,87);
int8_t enemy1y = -28;
int8_t enemy2x = random(26,87);
int8_t enemy2y = -28;

// variable for heart position
int8_t heartx = random(26,87);
int8_t hearty = -14;

uint8_t shipFrame = 0;
uint8_t enemyFrame = 0;
uint8_t heartFrame = 0;

int8_t shield = 3;
bool primed = false;

int8_t speed = 1;

uint16_t ledTimer = 0;
uint16_t ledTimerg = 0;

int8_t ee1 = 0;
int8_t ee2 = 0;

int8_t heartcounter = 0;

uint8_t fadeWidth;

// score variables
uint16_t score = 0;
uint16_t highScore = 0;

// Extract individual digits of a uint8_t
template< size_t size > void extractDigits(uint8_t (&buffer)[size], uint8_t value)
{
  for(uint8_t i = 0; i < size; ++i)
  {
    buffer[i] = value % 10;
    value /= 10;
  }
}

// Extract individual digits of a uint16_t
template< size_t size > void extractDigits(uint8_t (&buffer)[size], uint16_t value)
{
  for(uint8_t i = 0; i < size; ++i)
  {
    buffer[i] = value % 10;
    value /= 10;
  }
}

// storing sprites in PROGMEM
const unsigned char PROGMEM bootlogo[] =
{
// width, height,
//128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x2a, 0xa8, 0xa3, 0x8f, 0x3f, 0xff, 0xff, 0xfe, 0xf0, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x0a, 0x28, 0xa3, 0x87, 0x1f, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x01, 0xf0, 0xf8, 0xfc, 0xfe, 0x06, 0xa3, 0x0b, 0x07, 0x07, 0x3f, 0x0f, 0x23, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x28, 0xa1, 0x87, 0x1f, 0x7f, 0xff, 0x1f, 0x00, 0x80, 0xf1, 0xf3, 0xf3, 0x63, 0x63, 0x22, 0xb2, 0x1e, 0x20, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0xc8, 0x08, 0x88, 0x4a, 0x8a, 0x48, 0x48, 0x08, 0x88, 0x49, 0x89, 0x08, 0xca, 0x48, 0x09, 0x48, 0xc8, 0x48, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02, 0x03, 0x03, 0x00, 0x01, 0x02, 0x01, 0x00, 0x03, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const unsigned char PROGMEM splash[] =
{
// width, height,
//128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0xf8, 0xf8, 0xf8, 0xf8, 0x08, 0xd0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0x78, 0x78, 0x78, 0x78, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0x08, 0x38, 0xf8, 0xf8, 0xf8, 0xf8, 0xc0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0x38, 0x08, 0x40, 0xe0, 0xf0, 0xf8, 0xf8, 0x78, 0x78, 0x78, 0xf8, 0x78, 0x00, 0x00, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x05, 0x15, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xdf, 0xe0, 0x40, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xe1, 0xc2, 0x81, 0x81, 0x81, 0x81, 0xc2, 0xe1, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x87, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x00, 0x00, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0x9e, 0x9e, 0x9e, 0xbe, 0x9e, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x15, 0x05, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x05, 0x05, 0x05, 0x00, 0x00, 0xc0, 0xc3, 0xc3, 0xc7, 0xd7, 0xd7, 0xd7, 0xd0, 0x88, 0x80, 0x00, 0x01, 0x03, 0xcb, 0xd7, 0xd7, 0xd7, 0x17, 0x17, 0x17, 0xcb, 0xc3, 0xc1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x84, 0xcf, 0xc3, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0xc1, 0xc4, 0xc9, 0xd3, 0x17, 0x17, 0x17, 0xd7, 0xd7, 0xcf, 0xc7, 0x00, 0x00, 0x05, 0x05, 0x05, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xfc, 0x78, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x48, 0x00, 0xfc, 0x00, 0x48, 0x00, 0xff, 0x00, 0x48, 0x00, 0xfc, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0xe3, 0xe3, 0xff, 0xff, 0x7f, 0x3e, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3e, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xc3, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0xfc, 0x00, 0x48, 0x00, 0xff, 0x00, 0x48, 0x00, 0xfc, 0x00, 0x48, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x78, 0xfc, 
0xff, 0xfe, 0xff, 0xff, 0xff, 0xdf, 0xef, 0xc0, 0x3f, 0x00, 0xdf, 0x80, 0x8a, 0xc0, 0xef, 0xc0, 0x8a, 0x80, 0xdf, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xbf, 0xbf, 0xbf, 0x80, 0x63, 0x0f, 0x3f, 0xbf, 0xbf, 0xbc, 0xa0, 0x80, 0x47, 0x1f, 0x1f, 0x3f, 0xbc, 0xbc, 0xbc, 0xbf, 0x9f, 0x4f, 0x07, 0x00, 0x00, 0x3e, 0xbc, 0xbc, 0xbf, 0xbf, 0x9f, 0x4f, 0x07, 0x00, 0x00, 0x00, 0x3f, 0xbf, 0xbf, 0xbf, 0x80, 0x40, 0x00, 0x3f, 0xbf, 0xbf, 0xbf, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0xdf, 0x80, 0x8a, 0xc0, 0xef, 0xc0, 0x8a, 0x80, 0xdf, 0x00, 0x3f, 0xc0, 0xef, 0xdf, 0xff, 0xff, 0xff, 0xfe, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xab, 0x54, 0x82, 0x78, 0x6f, 0xdd, 0xf0, 0xba, 0x2d, 0x27, 0x2d, 0xba, 0xf0, 0xdd, 0x6f, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x40, 0x80, 0x00, 0xc0, 0x80, 0x40, 0x00, 0x80, 0x40, 0x40, 0x80, 0x00, 0x80, 0x40, 0x40, 0x00, 0x80, 0x40, 0x40, 0x00, 0x00, 0x00, 0xe0, 0x10, 0x90, 0x50, 0x90, 0x10, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x6f, 0xdd, 0xf0, 0xba, 0x2d, 0x27, 0x2d, 0xba, 0xf0, 0xdd, 0x6f, 0x78, 0x07, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xfa, 0xf4, 0xe9, 0xf5, 0xeb, 0xf3, 0xfb, 0xfd, 0xfd, 0xce, 0xe0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x02, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x02, 0x00, 0x02, 0x03, 0x03, 0x00, 0x02, 0x03, 0x03, 0x00, 0x00, 0x00, 0x07, 0x08, 0x0b, 0x09, 0x0b, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xe0, 0xce, 0xfd, 0xfd, 0xf3, 0xeb, 0xf3, 0xe9, 0xf5, 0xea, 0xf5, 0xfa, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const unsigned char PROGMEM pressb[] =
{
// width, height,
33, 10,
0x00, 0xf8, 0x08, 0x48, 0x30, 0x00, 0x78, 0x10, 0x08, 0x00, 0x30, 0x48, 0x68, 0x50, 0x00, 0x50, 0x68, 0x68, 0x00, 0x50, 0x68, 0x68, 0x00, 0x00, 0x00, 0xfc, 0x02, 0x7a, 0x52, 0x62, 0x02, 0xfc, 0x00, 
0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 
};

const unsigned char PROGMEM pressbmask[] =
{
// width, height,
//33, 10,
0xf8, 0xfc, 0xfc, 0xfc, 0x78, 0x78, 0xfc, 0x78, 0x1c, 0x38, 0x78, 0xfc, 0xfc, 0xf8, 0x50, 0xf8, 0xfc, 0xfc, 0x78, 0xf8, 0xfc, 0xfc, 0x68, 0x00, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 
0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 
};

const unsigned char PROGMEM player1[] =
{
// width, height,
17, 15,

//frame 0
0x00, 0x80, 0x70, 0x40, 0xa0, 0x00, 0x60, 0xd0, 0xe6, 0xf0, 0x60, 0x00, 0xa0, 0x40, 0x70, 0x80, 0x00, 
0x00, 0x00, 0x09, 0x01, 0x03, 0x00, 0x01, 0x04, 0x09, 0x04, 0x01, 0x00, 0x03, 0x01, 0x09, 0x00, 0x00, 

//frame 1
0x00, 0x80, 0x70, 0x40, 0xa0, 0x00, 0x60, 0xd0, 0xe6, 0xf0, 0x60, 0x00, 0xa0, 0x40, 0x70, 0x80, 0x00, 
0x00, 0x00, 0x11, 0x01, 0x03, 0x00, 0x01, 0x08, 0x31, 0x08, 0x01, 0x00, 0x03, 0x01, 0x11, 0x00, 0x00,
};

const unsigned char PROGMEM player1mask[] =
{
// width, height,
//17, 15,

//frame 0
0x80, 0xf0, 0xf8, 0xf0, 0xf0, 0xe0, 0xf0, 0xfe, 0xff, 0xfe, 0xf0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf0, 0x80, 
0x00, 0x09, 0x1f, 0x0b, 0x07, 0x03, 0x07, 0x0f, 0x1f, 0x0f, 0x07, 0x03, 0x07, 0x0b, 0x1f, 0x09, 0x00, 

//frame 1
0x80, 0xf0, 0xf8, 0xf0, 0xf0, 0xe0, 0xf0, 0xfe, 0xff, 0xfe, 0xf0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf0, 0x80, 
0x00, 0x09, 0x1f, 0x0b, 0x07, 0x03, 0x03, 0x0b, 0x3b, 0x0b, 0x03, 0x03, 0x07, 0x0b, 0x1f, 0x09, 0x00,
};

const unsigned char PROGMEM enemy1[] =
{
// width, height,
15, 30,

//frame 0
0x00, 0x40, 0x00, 0xe0, 0x00, 0x44, 0x00, 0xfe, 0x00, 0x44, 0x00, 0xe0, 0x00, 0x40, 0x00, 
0x00, 0xfa, 0x00, 0xff, 0x00, 0x52, 0x00, 0x7f, 0x00, 0x52, 0x00, 0xff, 0x00, 0xfa, 0x00, 
0x00, 0xc1, 0x78, 0xee, 0x84, 0xd4, 0x6e, 0x3f, 0x6e, 0xd4, 0x84, 0xee, 0x78, 0xc1, 0x00, 
0x00, 0x03, 0x03, 0x06, 0x0b, 0x0d, 0x1d, 0x1d, 0x1d, 0x0d, 0x0b, 0x06, 0x03, 0x03, 0x00, 

//frame 1
0x00, 0x20, 0x00, 0xe8, 0x00, 0x20, 0x00, 0xfe, 0x00, 0x20, 0x00, 0xe8, 0x00, 0x20, 0x00, 
0x00, 0xf9, 0x00, 0x6e, 0x00, 0x29, 0x00, 0x7f, 0x00, 0x29, 0x00, 0x6e, 0x00, 0xf9, 0x00, 
0x00, 0xc0, 0x78, 0xee, 0x84, 0xd4, 0x6e, 0x3f, 0x6e, 0xd4, 0x84, 0xee, 0x78, 0xc0, 0x00, 
0x00, 0x03, 0x03, 0x06, 0x0b, 0x09, 0x15, 0x15, 0x15, 0x09, 0x0b, 0x06, 0x03, 0x03, 0x00,
};

const unsigned char PROGMEM enemy1mask[] =
{
// width, height,
//15, 30,

//frame 0
0x40, 0xe0, 0xe0, 0xf0, 0xe4, 0xee, 0xfe, 0xff, 0xfe, 0xee, 0xe4, 0xf0, 0xe0, 0xe0, 0x40, 
0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 
0xc1, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xc1, 
0x03, 0x07, 0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x07, 0x03,

//frame 1
0x20, 0xf0, 0xe8, 0xfc, 0x28, 0xf0, 0xfe, 0xff, 0xfe, 0xf0, 0x28, 0xfc, 0x28, 0xf0, 0x20, 
0xf9, 0xff, 0xf9, 0x6e, 0x29, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0x29, 0x6e, 0xf9, 0xff, 0xf9, 
0xc0, 0xf9, 0xfe, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xfe, 0xf9, 0xc0, 
0x03, 0x07, 0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x07, 0x03, 
};

const unsigned char PROGMEM heart[] =
{
// width, height,
16, 14,

//frame 0
0x00, 0x70, 0x88, 0x74, 0xda, 0xaa, 0x4a, 0x94, 0x14, 0x0a, 0x0a, 0x8a, 0x74, 0x88, 0x70, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0x0b, 0x16, 0x15, 0x0a, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 

//frame 1
0x00, 0x00, 0x00, 0x00, 0xf8, 0x04, 0x02, 0x04, 0x04, 0xfa, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x0c, 0x18, 0x14, 0x0b, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 

//frame 2
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xc2, 0xc2, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1a, 0x1a, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

//frame 3
0x00, 0x00, 0x00, 0x00, 0xf8, 0x04, 0xfa, 0x04, 0x04, 0x02, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x0b, 0x14, 0x18, 0x0c, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 

//frame 4
0x00, 0x70, 0x88, 0x74, 0xda, 0xaa, 0x4a, 0x94, 0x14, 0x0a, 0x0a, 0x8a, 0x74, 0x88, 0x70, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0x0b, 0x16, 0x15, 0x0a, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00,
};

const unsigned char PROGMEM Hearthit[] =
{
// width, height,
16, 14,
0x00, 0x70, 0xe8, 0xb4, 0xba, 0xee, 0x06, 0xfc, 0x0c, 0xf6, 0x0e, 0xfa, 0x74, 0x88, 0x70, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x02, 0x07, 0x0c, 0x17, 0x16, 0x0d, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 
};

const unsigned char PROGMEM heartmask[] =
{
// width, height,
//16, 14,

//frame 0
0x70, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0x70, 
0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 

//frame 1
0x00, 0x00, 0x00, 0xf8, 0xfc, 0xfe, 0xff, 0xfe, 0xfe, 0xff, 0xfe, 0xfc, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x00, 0x00, 0x00, 

//frame 2
0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0xff, 0xff, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x3f, 0x1f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 

//frame 3
0x00, 0x00, 0x00, 0xf8, 0xfc, 0xfe, 0xff, 0xfe, 0xfe, 0xff, 0xfe, 0xfc, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x1f, 0x0f, 0x07, 0x01, 0x00, 0x00, 0x00, 

//frame 4
0x70, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0x70, 
0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00,
};

const unsigned char PROGMEM cloudborderl[] =
{
// width, height,
25, 64,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfd, 0xfd, 0xfb, 0xe1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xcf, 0xc7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xef, 0xef, 0xdf, 0x8f, 0x07, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x0f, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xfd, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xdf, 0xef, 0x07, 0x03, 0x01, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xbf, 0xbf, 0xdf, 0xe7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const unsigned char PROGMEM cloudbackdrop[] =
{
// width, height,
128, 64,
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xa8, 0x52, 0xa5, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0b, 0xa4, 0x51, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x01, 0x7c, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0xc1, 0x2e, 0x90, 0x45, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x82, 0x39, 0x44, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0xf2, 0x05, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xa2, 0x49, 0x14, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x38, 0x87, 0x50, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x0a, 0xe1, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x28, 0x92, 0x45, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xa0, 0x4f, 0x10, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x22, 0x9c, 0x41, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xa2, 0x09, 0x74, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x3e, 0x80, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x8a, 0x25, 0xd0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x10, 0xa5, 0x4a, 0x15, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
};

const unsigned char PROGMEM cloudbackdrop2[] =
{
// width, height,
128, 64,
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xa8, 0x52, 0xa5, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0b, 0xa4, 0x51, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x01, 0x7c, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x2e, 0x90, 0x45, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x82, 0x39, 0x44, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0xf2, 0x05, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xa2, 0x49, 0x14, 0xe3, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x38, 0x87, 0x50, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x0a, 0xe1, 0x1c, 0x03, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x28, 0x92, 0x45, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xa0, 0x4f, 0x10, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xc1, 0x22, 0x9c, 0x41, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xa2, 0x09, 0x74, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x80, 0x41, 0x3e, 0x80, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x8a, 0x25, 0xd0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x10, 0xa5, 0x4a, 0x15, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
};

const unsigned char PROGMEM cloudborderlmask[] =
{
// width, height,
//25, 64,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xe1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xc7, 0x80, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x8f, 0x07, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x0f, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x07, 0x03, 0x01, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const unsigned char PROGMEM cloudborderr[] =
{
25, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe7, 0xfb, 0xfd, 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf7, 0xfb, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xbf, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0xe0, 0xf1, 0xfb, 0xf7, 0xf7, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe3, 0xf3, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0xdf, 0xbf, 0xbf, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const unsigned char PROGMEM cloudborderrmask[] =
{
//25, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x80, 0xc0, 0xe0, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0xe0, 0xf1, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xe3, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const unsigned char PROGMEM explosion[] =
{
// width, height,
11, 8,
0x00, 0x08, 0x40, 0x00, 0x00, 0x12, 0x00, 0x00, 0x40, 0x08, 0x00, 
};

const unsigned char PROGMEM explosionmask[] =
{
// width, height,
//11, 8,
0x08, 0x5c, 0xe8, 0x40, 0x12, 0x3f, 0x12, 0x40, 0xe8, 0x5c, 0x08, 
};

const unsigned char PROGMEM speedup[] =
{
// width, height,
49, 13,
0x00, 0x80, 0x9c, 0xbe, 0xf6, 0xe6, 0x00, 0xfc, 0xfe, 0x36, 0x3e, 0x1c, 0x00, 0xfc, 0xfe, 0xb6, 0xb6, 0x00, 0x00, 0xfc, 0xfe, 0xb6, 0xb6, 0x00, 0x00, 0xfe, 0xfe, 0x06, 0x86, 0x86, 0xce, 0xfc, 0x78, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x80, 0xfe, 0xfe, 0x00, 0xfc, 0xfe, 0x36, 0x3e, 0x1c, 0x00, 
0x00, 0x09, 0x01, 0x09, 0x08, 0x08, 0x00, 0x01, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x09, 0x01, 0x09, 0x08, 0x00, 0x09, 0x01, 0x08, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x00, 0x00, 0x09, 0x09, 0x08, 0x00, 0x08, 0x00, 
};

const unsigned char PROGMEM speedupmask[] =
{
// width, height,
//49, 13,
0x80, 0xdc, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0x7f, 0x3e, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xb6, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xb6, 0xfe, 0xff, 0xff, 0xff, 0xcf, 0xcf, 0xff, 0xfe, 0xfc, 0x78, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0x7f, 0x3e, 0x1c, 
0x09, 0x1f, 0x1f, 0x1f, 0x1d, 0x1d, 0x1d, 0x1f, 0x1f, 0x1d, 0x1c, 0x1c, 0x1c, 0x1d, 0x1f, 0x1f, 0x1f, 0x1d, 0x1c, 0x1d, 0x1f, 0x1f, 0x1f, 0x1d, 0x1d, 0x1f, 0x1f, 0x1d, 0x1f, 0x1f, 0x1f, 0x1d, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1d, 0x1f, 0x1f, 0x1f, 0x1d, 0x1d, 0x1f, 0x1f, 0x1d, 0x1c, 0x1c, 0x08, 
};

void initEEPROM() {
  char c1 = EEPROM.read(EEPROM_START_C1);
  char c2 = EEPROM.read(EEPROM_START_C2);
  
  if (c1 != 'L' || c2 != 'Z') {
    highScore = 0;
    EEPROM.update(EEPROM_START_C1, 'L');
    EEPROM.update(EEPROM_START_C2, 'Z');
    EEPROM.update(EEPROM_SCORE, highScore);
  }
  else {
    EEPROM.get(EEPROM_SCORE, highScore);
  }
}

// Resets the fade out effect
void resetFade()
{
  fadeWidth = 0;
}

// Resets the fade in effect
void resetFadeIn()
{
  fadeWidth = WIDTH;
}

// fade in function
bool fadeIn()
{
  for(uint8_t i = 0; i < (HEIGHT / 2); ++i)
  {
    arduboy.drawFastHLine(0, (i * 2), fadeWidth, BLACK);
    arduboy.drawFastHLine((WIDTH - fadeWidth), (i * 2) + 1, fadeWidth, BLACK);
  }

  // If fade isn't complete, decrease the counter
  if(fadeWidth > 0)
  {
    fadeWidth = fadeWidth - 4;
    return false;
  }
  else
    return true;
}

// fade out function
bool fadeOut()
{
  for(uint8_t i = 0; i < (HEIGHT / 2); ++i)
  {
    arduboy.drawFastHLine(0, (i * 2), fadeWidth, BLACK);
    arduboy.drawFastHLine((WIDTH - fadeWidth), (i * 2) + 1, fadeWidth, BLACK);
  }
  // If fade isn't complete, increase the counter
  if(fadeWidth < WIDTH)
  {
    ++fadeWidth;
    return false;
  }
  else
    return true;
  
}

void setup() {
  // things that needs to be ran once
  arduboy.boot();
  arduboy.display();
  arduboy.flashlight();
  arduboy.systemButtons();
  arduboy.audio.begin();
  // no call to bootLogo
  arduboy.clear();
  initEEPROM();
  
  // limits the frames per second
  arduboy.setFrameRate(60);
}

void loop() {
    // Wait for the next frame
   if (!(arduboy.nextFrame())) return;
  
  arduboy.pollButtons();
  arduboy.clear();

  if (state == 0)  { vsboot(); }
  else if (state == 1)  { doSplash(); }
  else if (state == 2)  { gameplay(); }
  else if (state == 3)  { gameover(); }
  else if (state == 4)  { pause(); }
  
  arduboy.display();
}

void vsboot() {
  // Vsoft logo display
  arduboy.drawBitmap(0, 0, bootlogo, 128, 64, WHITE);
  if(fadeOut())
  {
    resetFade();
    resetFadeIn();
    state = 1;
  }
}

  // scrolling background1 function
void scrollingbackground() {
  arduboy.drawBitmap(backdropx, backdropy, cloudbackdrop, 128, 64, WHITE);
  arduboy.drawBitmap(backdropx, backdropy - 64, cloudbackdrop, 128, 64, WHITE);
  sprite.drawExternalMask(cloudl.x, cloudl.y, cloudborderl, cloudborderlmask, 0, 0);
  sprite.drawExternalMask(cloudr.x, cloudr.y, cloudborderr, cloudborderrmask, 0, 0);
  sprite.drawExternalMask(cloudl.x, cloudl.y - 64, cloudborderl, cloudborderlmask, 0, 0);
  sprite.drawExternalMask(cloudr.x, cloudr.y - 64, cloudborderr, cloudborderrmask, 0, 0);
  sprite.drawExternalMask(cloudl.x, cloudl.y + 64, cloudborderl, cloudborderlmask, 0, 0);
  sprite.drawExternalMask(cloudr.x, cloudr.y + 64, cloudborderr, cloudborderrmask, 0, 0);
  
  // background scrolling loop
  ++backdropy;
  if( backdropy > 64 ) {
  backdropy = 0;
  }
  cloudl.y = cloudl.y +2;
  cloudr.y = cloudr.y +2;
  if( cloudl.y > 64 ) {
  cloudl.y = 0;
  }
  if( cloudr.y > 64 ) {
  cloudr.y = 0;
  }
}

void scrollingbackground2() {
  arduboy.drawBitmap(backdropx, backdropy, cloudbackdrop2, 128, 64, WHITE);
  arduboy.drawBitmap(backdropx, backdropy - 64, cloudbackdrop2, 128, 64, WHITE);
  sprite.drawExternalMask(cloudl.x, cloudl.y, cloudborderl, cloudborderlmask, 0, 0);
  sprite.drawExternalMask(cloudr.x, cloudr.y, cloudborderr, cloudborderrmask, 0, 0);
  sprite.drawExternalMask(cloudl.x, cloudl.y - 64, cloudborderl, cloudborderlmask, 0, 0);
  sprite.drawExternalMask(cloudr.x, cloudr.y - 64, cloudborderr, cloudborderrmask, 0, 0);
  sprite.drawExternalMask(cloudl.x, cloudl.y + 64, cloudborderl, cloudborderlmask, 0, 0);
  sprite.drawExternalMask(cloudr.x, cloudr.y + 64, cloudborderr, cloudborderrmask, 0, 0);
  
  // background scrolling loop
  ++backdropy;
  if( backdropy > 64 ) {
  backdropy = 0;
  }
  cloudl.y = cloudl.y +2;
  cloudr.y = cloudr.y +2;
  if( cloudl.y > 64 ) {
  cloudl.y = 0;
  }
  if( cloudr.y > 64 ) {
  cloudr.y = 0;
  }
}

  // Pause state
void pause() {
  scrollingbackground2();
  arduboy.setCursor(37, 30);
  arduboy.print(F("* PAUSE *"));
  if(arduboy.everyXFrames(15)) // when running at 60fps
  {
  ++heartFrame; // Add 1
  if(heartFrame > 4) { heartFrame = 0; } // resets frame to 0 if greater then 4
  }
  Sprites::drawExternalMask(10, 27, heart, heartmask, heartFrame, heartFrame);
  Sprites::drawExternalMask(100, 27, heart, heartmask, heartFrame, heartFrame);
  arduboy.setCursor(15, 37);
  // If 'B' button is pressed move back to gameplay
  if (arduboy.justPressed(B_BUTTON))  { state = 2; }

}

  // Splashscreen state
void doSplash() {
  // Reset highScore value option
  if(!primed) {
  if (arduboy.justPressed(B_BUTTON))
  {
    primed = true;
  }
  }
  else {
  if (arduboy.justPressed(DOWN_BUTTON))
  {
    highScore = 0;
    EEPROM.put(EEPROM_SCORE, highScore);
    primed = false;
  }
  else if (arduboy.justPressed(B_BUTTON)) {
    primed = false;
  }
  // Display a warning
  // Might want to change the position
  arduboy.setCursor(16, 1);
  arduboy.print(F("DOWN:DEL."));
  arduboy.setCursor(66, 1);
  arduboy.print(F("B:CANCEL"));
  }
  
  if(arduboy.everyXFrames(15)) // when running at 60fps
  {
  ++heartFrame; // Add 1
  if(heartFrame > 4) { heartFrame = 0; } // resets frame to 0 if greater then 4
  }

  // 2 hearts for the Splashscreen
  Sprites::drawExternalMask(23, 31, heart, heartmask, heartFrame, heartFrame);
  Sprites::drawExternalMask(89, 31, heart, heartmask, heartFrame, heartFrame);
  arduboy.drawBitmap(0, 0, splash, 128, 64, WHITE);
  fadeIn();

  // If 'A' button is pressed move to gameplay
  if (arduboy.justPressed(A_BUTTON))  {
    arduboy.initRandomSeed();
    score = 0;
    shield = 3;
    state = 2; 
    resetFadeIn();
  }

}

  // Gameover state
  void gameover() {
  
  // Only need 5 for a uint16_t
  uint8_t digits[5];
  
  if (score > highScore) {
    highScore = score;
    EEPROM.put(EEPROM_SCORE, highScore);
  }
  scrollingbackground();
  arduboy.fillRect(0, 20, 128, 31, BLACK);
  arduboy.drawLine(0, 21, 128, 21, WHITE);
  arduboy.drawLine(0, 49, 128, 49, WHITE);
  
  arduboy.setCursor(37, 9);
  arduboy.print(F("GAME OVER"));
  
  arduboy.setCursor(30, 27);
  arduboy.print(F("SCORE:"));
  arduboy.setCursor(65, 27);
  extractDigits(digits, score);
  for(uint8_t i = 5; i > 0; --i)
  arduboy.print(digits[i - 1]);
  
  arduboy.setCursor(15, 37);
  arduboy.print(F("HIGH SCORE:"));
  arduboy.setCursor(81, 37);
  extractDigits(digits, highScore);
  for(uint8_t i = 5; i > 0; --i)
  arduboy.print(digits[i - 1]);
  
  sprite.drawExternalMask(46, 52, pressb, pressbmask, 0, 0);

  // If 'A' button is pressed move to splash
  if (arduboy.justPressed(B_BUTTON))  { state = 1; score = 0; enemy1y = -28; enemy2y = -28; }
  }

void youarehit() {
arduboy.digitalWriteRGB(RED_LED, RGB_ON);
ledTimer = arduboy.frameCount + 30;
}

void oneup() {
arduboy.digitalWriteRGB(GREEN_LED, RGB_ON);
sound.tone(NOTE_E6,100, NOTE_E7,100, NOTE_E8,100);
ledTimerg = arduboy.frameCount + 30;
}

void speedupdisplay() {
arduboy.digitalWriteRGB(GREEN_LED, RGB_ON);
ledTimerg = arduboy.frameCount + 30;
sound.tone(NOTE_G4,100, NOTE_E5,100, NOTE_C6,100);
sound.tone(NOTE_C5,100, NOTE_E4,100, NOTE_G3,100);
}

  // gameplay state
void gameplay() {
  
  // Only need 5 for a uint16_t
  uint8_t digits[5];
  
  uint16_t oldScore = score;
  
  if(ledTimer > 0 && arduboy.frameCount >= ledTimer)
  {
  arduboy.digitalWriteRGB(RED_LED, RGB_OFF);
  ledTimer = 0;
  }
    if(ledTimerg > 0 && arduboy.frameCount >= ledTimerg)
    {
    arduboy.digitalWriteRGB(GREEN_LED, RGB_OFF);
    ledTimerg = 0;
    }
    
  // let's call my scrolling background
  scrollingbackground();
  
  if(arduboy.everyXFrames(2)) // when running at 60fps
  {
  ++shipFrame; // Add 1
  shipFrame %= 2; // Remainder of dividing by 2
  }

  if(arduboy.everyXFrames(5)) // when running at 60fps
  {
  ++enemyFrame; // Add 1
  enemyFrame %= 2; // Remainder of dividing by 2
  }
  
  if(arduboy.everyXFrames(7)) // when running at 60fps
  {
  ++heartFrame; // Add 1
  if(heartFrame > 3) { heartFrame = 0; } // resets frame to 0 if greater then 3
  }

  // falling heart display
  Sprites::drawExternalMask(heartx, hearty, heart, heartmask, heartFrame, heartFrame);
  
  // enemies appearing
  Sprites::drawExternalMask(enemy1x, enemy1y, enemy1, enemy1mask, enemyFrame, enemyFrame);
  Sprites::drawExternalMask(enemy2x, enemy2y, enemy1, enemy1mask, enemyFrame, enemyFrame);
  
  // resetting position for next enemy to appear
  enemy1y = enemy1y + speed;
  if( enemy1y > 64 ) {
  enemy1y = -28; enemy1x = random(26,87);
  }
  enemy2y = enemy2y + speed;
  if( enemy1y > 64 ) {
  enemy2y = -28; enemy2x = random(26,87);
  }
  
  // resetting position for next heart to fall
  hearty = hearty + speed + 1;
  if( hearty > 64 ) {
  hearty = -28; heartx = random(26,87);
  }
  
  // here i display the main sprite
  Sprites::drawExternalMask(player.x, player.y, player1, player1mask, shipFrame, shipFrame);
  
  //Score rectangle area
  arduboy.fillRect(0, 0, 128, 10, BLACK);
  arduboy.setCursor(1, 1);
  arduboy.print(F("SCORE:")); arduboy.setCursor(37, 1);
  extractDigits(digits, score);
  for(uint8_t i = 5; i > 0; --i)
  arduboy.print(digits[i - 1]);
  
  arduboy.setCursor(78, 1);
  arduboy.print(F("SHIELD:")); arduboy.setCursor(120, 1); arduboy.print(shield);
  
// checking for collisions
  Rect playerRect = { player.x + 6, player.y + 4, 5, 5 };
  Rect enemy1Rect = { enemy1x + 5, enemy1y + 20, 10, 10 };
  Rect enemy2Rect = { enemy2x + 5, enemy2y + 20, 10, 10 };
  Rect heartRect = { heartx + 1, hearty + 1, 15, 13 };
  
  if(arduboy.collide(playerRect, heartRect)) {
  score = score + 5; ++heartcounter; sound.tone(NOTE_E3,80, NOTE_E4,80, NOTE_E5,80); hearty = -14; heartx = random(26,87);
  }

  if(arduboy.collide(playerRect, enemy1Rect)) {
  --shield; youarehit(); sound.tone(NOTE_C4,100, NOTE_C3,100, NOTE_C2,100); enemy1y = -14; enemy1x = random(26,87);
  }
  
    if(arduboy.collide(playerRect, enemy2Rect)) {
    --shield; youarehit(); sound.tone(NOTE_C4,100, NOTE_C3,100, NOTE_C2,100); enemy2y = -28; enemy2x = random(26,87);
    }
  
  // what is happening when we press buttons
  if(arduboy.pressed(LEFT_BUTTON) && player.x > 18) {
        --player.x;
  }
    if(arduboy.pressed(RIGHT_BUTTON) && player.x < 92) {
        ++player.x;
    }
    if(arduboy.pressed(UP_BUTTON) && player.y > 10) {
        --player.y; 
    }
    if(arduboy.pressed(DOWN_BUTTON) && player.y < 49) {
        ++player.y;
    }
    if(arduboy.justPressed(A_BUTTON)) {
        sound.tone(NOTE_E4,50, NOTE_D4,100, NOTE_E4,50);
        arduboy.drawLine(player.x + 8, player.y - 1, player.x + 8, 10, WHITE);
        Rect laserRect = { player.x + 8, player.y - 64, 2, 64 };
          if(arduboy.collide(laserRect, enemy1Rect)) {
          score = score + 10; sound.tone(NOTE_F4,100, NOTE_F3,100, NOTE_F2,100); enemy1y = -14; enemy1x = random(26,87);
          }
            if(arduboy.collide(laserRect, enemy2Rect)) {
            score = score + 10; sound.tone(NOTE_F4,100, NOTE_F3,100, NOTE_F2,100); enemy2y = -14; enemy2x = random(26,87);
            }
              if(arduboy.collide(laserRect, heartRect)) {
              score = (score > 10) ? score - 10 : 0;  //check if score would be lower then 10, if not -10 pts
              sound.tone(NOTE_C4,100, NOTE_C4,100, NOTE_C4,100);
              }
    }
    if(arduboy.justPressed(B_BUTTON)) {
        sound.tone(NOTE_C4,70, NOTE_E4,70, NOTE_G4,7); state = 4;
    }

  // check if speed increase triggered
  if(score >= 900 && oldScore < 900) { speed = 3; speedupdisplay(); }
  else if(score >= 700 && oldScore < 700) { speed = 1; speedupdisplay(); }
  else if(score >= 500 && oldScore < 500) { speed = 2; speedupdisplay(); }
  
  //check if you gain a life
  if(heartcounter >= 15) { ++shield; oneup(); heartcounter = 0; }
  
  //making sure score can't go lower then zero
  if(score > 65535 ) { score = 0; }
  
  // check is game is over
  if(shield < 0) {
  speed = 1;
  state = 3;
  arduboy.digitalWriteRGB(RED_LED, RGB_OFF); // turn off LEDS
  arduboy.digitalWriteRGB(GREEN_LED, RGB_OFF); // turn off LEDS
  }
}
